// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteAccountsByIdData, DeleteAccountsByIdResponses, DeleteExpensesByIdData, DeleteExpensesByIdErrors, DeleteExpensesByIdResponses, DeleteGroupsByIdData, DeleteGroupsByIdErrors, DeleteGroupsByIdMembersByUserIdData, DeleteGroupsByIdMembersByUserIdErrors, DeleteGroupsByIdMembersByUserIdResponses, DeleteGroupsByIdResponses, DeleteUsersByIdData, DeleteUsersByIdErrors, DeleteUsersByIdResponses, GetAccountsByIdData, GetAccountsByIdResponses, GetAccountsData, GetAccountsResponses, GetAccountTypesByIdData, GetAccountTypesByIdResponses, GetAccountTypesData, GetAccountTypesResponses, GetActivityData, GetActivityErrors, GetActivityResponses, GetExpensesByIdCommentsData, GetExpensesByIdCommentsErrors, GetExpensesByIdCommentsResponses, GetExpensesByIdData, GetExpensesByIdErrors, GetExpensesByIdResponses, GetExpensesByIdSplitsData, GetExpensesByIdSplitsErrors, GetExpensesByIdSplitsResponses, GetGroupsByIdData, GetGroupsByIdErrors, GetGroupsByIdResponses, GetReportsMonthlyData, GetReportsMonthlyErrors, GetReportsMonthlyResponses, GetReportsTopSpendersData, GetReportsTopSpendersErrors, GetReportsTopSpendersResponses, GetSettlementsByIdData, GetSettlementsByIdErrors, GetSettlementsByIdResponses, GetUsersByIdData, GetUsersByIdErrors, GetUsersByIdResponses, PostAccountsData, PostAccountsResponses, PostExpensesByIdCommentsData, PostExpensesByIdCommentsErrors, PostExpensesByIdCommentsResponses, PostExpensesByIdSplitsData, PostExpensesByIdSplitsErrors, PostExpensesByIdSplitsResponses, PostExpensesData, PostExpensesErrors, PostExpensesResponses, PostGroupsByIdMembersData, PostGroupsByIdMembersErrors, PostGroupsByIdMembersResponses, PostGroupsData, PostGroupsErrors, PostGroupsResponses, PostSettlementsData, PostSettlementsErrors, PostSettlementsResponses, PostUsersData, PostUsersErrors, PostUsersResponses, PutAccountsByIdData, PutAccountsByIdResponses, PutExpensesByIdData, PutExpensesByIdErrors, PutExpensesByIdResponses, PutGroupsByIdData, PutGroupsByIdErrors, PutGroupsByIdResponses, PutUsersByIdData, PutUsersByIdErrors, PutUsersByIdResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List currencies
 * List all currencies
 */
export const getAccountTypes = <ThrowOnError extends boolean = false>(options?: Options<GetAccountTypesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountTypesResponses, unknown, ThrowOnError>({
        url: '/account-types',
        ...options
    });
};

/**
 * Get Currency
 * Get a single Currency by ID
 */
export const getAccountTypesById = <ThrowOnError extends boolean = false>(options: Options<GetAccountTypesByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountTypesByIdResponses, unknown, ThrowOnError>({
        url: '/account-types/{id}',
        ...options
    });
};

/**
 * List accounts
 * List all accounts for the user
 */
export const getAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsResponses, unknown, ThrowOnError>({
        url: '/accounts',
        ...options
    });
};

/**
 * Create account
 * Create a new account for the user
 */
export const postAccounts = <ThrowOnError extends boolean = false>(options: Options<PostAccountsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAccountsResponses, unknown, ThrowOnError>({
        url: '/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete account
 * Delete an account by ID
 */
export const deleteAccountsById = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAccountsByIdResponses, unknown, ThrowOnError>({
        url: '/accounts/{id}',
        ...options
    });
};

/**
 * Get account
 * Get details of a single account by ID
 */
export const getAccountsById = <ThrowOnError extends boolean = false>(options: Options<GetAccountsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountsByIdResponses, unknown, ThrowOnError>({
        url: '/accounts/{id}',
        ...options
    });
};

/**
 * Update account
 * Update an existing account by ID
 */
export const putAccountsById = <ThrowOnError extends boolean = false>(options: Options<PutAccountsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutAccountsByIdResponses, unknown, ThrowOnError>({
        url: '/accounts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get activity feed
 * Get recent expenses and settlements
 */
export const getActivity = <ThrowOnError extends boolean = false>(options?: Options<GetActivityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetActivityResponses, GetActivityErrors, ThrowOnError>({
        url: '/activity',
        ...options
    });
};

/**
 * Create a new expense
 * Create a new expense
 */
export const postExpenses = <ThrowOnError extends boolean = false>(options: Options<PostExpensesData, ThrowOnError>) => {
    return (options.client ?? client).post<PostExpensesResponses, PostExpensesErrors, ThrowOnError>({
        url: '/expenses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete expense by ID
 * Delete an expense from the system
 */
export const deleteExpensesById = <ThrowOnError extends boolean = false>(options: Options<DeleteExpensesByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteExpensesByIdResponses, DeleteExpensesByIdErrors, ThrowOnError>({
        url: '/expenses/{id}',
        ...options
    });
};

/**
 * Get expense by ID
 * Get details of an expense by ID
 */
export const getExpensesById = <ThrowOnError extends boolean = false>(options: Options<GetExpensesByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetExpensesByIdResponses, GetExpensesByIdErrors, ThrowOnError>({
        url: '/expenses/{id}',
        ...options
    });
};

/**
 * Update expense by ID
 * Update an existing expense
 */
export const putExpensesById = <ThrowOnError extends boolean = false>(options: Options<PutExpensesByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutExpensesByIdResponses, PutExpensesByIdErrors, ThrowOnError>({
        url: '/expenses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get comments for expense
 * Get all comments for an expense
 */
export const getExpensesByIdComments = <ThrowOnError extends boolean = false>(options: Options<GetExpensesByIdCommentsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetExpensesByIdCommentsResponses, GetExpensesByIdCommentsErrors, ThrowOnError>({
        url: '/expenses/{id}/comments',
        ...options
    });
};

/**
 * Add comment to expense
 * Add a comment to an expense
 */
export const postExpensesByIdComments = <ThrowOnError extends boolean = false>(options: Options<PostExpensesByIdCommentsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostExpensesByIdCommentsResponses, PostExpensesByIdCommentsErrors, ThrowOnError>({
        url: '/expenses/{id}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get splits for expense
 * Get all splits for an expense
 */
export const getExpensesByIdSplits = <ThrowOnError extends boolean = false>(options: Options<GetExpensesByIdSplitsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetExpensesByIdSplitsResponses, GetExpensesByIdSplitsErrors, ThrowOnError>({
        url: '/expenses/{id}/splits',
        ...options
    });
};

/**
 * Add split to expense
 * Add a split to an expense
 */
export const postExpensesByIdSplits = <ThrowOnError extends boolean = false>(options: Options<PostExpensesByIdSplitsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostExpensesByIdSplitsResponses, PostExpensesByIdSplitsErrors, ThrowOnError>({
        url: '/expenses/{id}/splits',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new group
 * Create a new group
 */
export const postGroups = <ThrowOnError extends boolean = false>(options: Options<PostGroupsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostGroupsResponses, PostGroupsErrors, ThrowOnError>({
        url: '/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete group by ID
 * Delete a group from the system
 */
export const deleteGroupsById = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteGroupsByIdResponses, DeleteGroupsByIdErrors, ThrowOnError>({
        url: '/groups/{id}',
        ...options
    });
};

/**
 * Get group by ID
 * Get details of a group by ID
 */
export const getGroupsById = <ThrowOnError extends boolean = false>(options: Options<GetGroupsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupsByIdResponses, GetGroupsByIdErrors, ThrowOnError>({
        url: '/groups/{id}',
        ...options
    });
};

/**
 * Update group by ID
 * Update an existing group
 */
export const putGroupsById = <ThrowOnError extends boolean = false>(options: Options<PutGroupsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutGroupsByIdResponses, PutGroupsByIdErrors, ThrowOnError>({
        url: '/groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add member to group
 * Add a user to a group
 */
export const postGroupsByIdMembers = <ThrowOnError extends boolean = false>(options: Options<PostGroupsByIdMembersData, ThrowOnError>) => {
    return (options.client ?? client).post<PostGroupsByIdMembersResponses, PostGroupsByIdMembersErrors, ThrowOnError>({
        url: '/groups/{id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove member from group
 * Remove a user from a group
 */
export const deleteGroupsByIdMembersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupsByIdMembersByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteGroupsByIdMembersByUserIdResponses, DeleteGroupsByIdMembersByUserIdErrors, ThrowOnError>({
        url: '/groups/{id}/members/{userId}',
        ...options
    });
};

/**
 * Get monthly report
 * Get monthly spend by category
 */
export const getReportsMonthly = <ThrowOnError extends boolean = false>(options?: Options<GetReportsMonthlyData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReportsMonthlyResponses, GetReportsMonthlyErrors, ThrowOnError>({
        url: '/reports/monthly',
        ...options
    });
};

/**
 * Get top spenders
 * Get top spenders by total amount
 */
export const getReportsTopSpenders = <ThrowOnError extends boolean = false>(options?: Options<GetReportsTopSpendersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReportsTopSpendersResponses, GetReportsTopSpendersErrors, ThrowOnError>({
        url: '/reports/top-spenders',
        ...options
    });
};

/**
 * Create a new settlement
 * Create a new settlement
 */
export const postSettlements = <ThrowOnError extends boolean = false>(options: Options<PostSettlementsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostSettlementsResponses, PostSettlementsErrors, ThrowOnError>({
        url: '/settlements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get settlement by ID
 * Get details of a settlement by ID
 */
export const getSettlementsById = <ThrowOnError extends boolean = false>(options: Options<GetSettlementsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSettlementsByIdResponses, GetSettlementsByIdErrors, ThrowOnError>({
        url: '/settlements/{id}',
        ...options
    });
};

/**
 * Create a new user
 * Create a new user in the system
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUsersResponses, PostUsersErrors, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete user by ID
 * Delete a user from the system
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUsersByIdResponses, DeleteUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by ID
 * Get details of a user by ID
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUsersByIdResponses, GetUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user by ID
 * Update an existing user
 */
export const putUsersById = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutUsersByIdResponses, PutUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
